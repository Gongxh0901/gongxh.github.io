# Cursor 项目规则文件
# 这个文件定义了本Jekyll个人网站项目的开发规范和特性

## 项目概述
这是一个基于Jekyll的个人技术博客网站，专注于Cocos Creator游戏开发技术分享。

## 技术栈
- **框架**: Jekyll 4.4.1
- **主题**: Minima
- **样式**: SCSS
- **内容**: Markdown
- **部署**: GitHub Pages

## 文件结构规范

### 核心配置文件
- `_config.yml`: 网站核心配置，包含网站信息、作者信息、项目展示等
- `Gemfile`: Ruby依赖管理
- `assets/main.scss`: 自定义样式文件

### 内容文件
- `index.markdown`: 网站主页
- `about.markdown`: 关于页面
- `_posts/`: 技术文章目录，文件名格式: YYYY-MM-DD-title.markdown

### 开发规范

#### Markdown文件头部格式
```yaml
---
layout: post|page
title: "文章标题"
date: YYYY-MM-DD HH:MM:SS +0800
categories: 分类1 分类2
tags: [标签1, 标签2, 标签3]
excerpt: "文章摘要，会在首页显示"
---
```

#### 样式编写规范
- 使用CSS变量定义颜色主题
- 遵循BEM命名规范
- 优先使用Flexbox和Grid布局
- 确保响应式设计

#### 内容创作规范
- 技术文章必须包含实际代码示例
- 代码块必须标明语言类型
- 文章结构清晰，使用合适的标题层级
- 每篇文章都要有简洁明了的摘要

## Git提交规范
- feat: 新功能
- fix: 修复bug
- docs: 文档更新
- style: 样式调整
- refactor: 代码重构
- post: 新增文章
- config: 配置修改

## Jekyll特定规则

### Liquid模板语法
- 使用 `{{ site.变量名 }}` 访问配置变量
- 使用 `{% for %}` 循环遍历数组
- 使用 `{% if %}` 进行条件判断

### 资源引用
- 图片放在 `assets/images/` 目录
- 使用相对路径引用资源
- 大图片要进行压缩优化

### SEO优化
- 每个页面都要有合适的title和description
- 使用语义化的HTML标签
- 图片要有alt属性

## 开发环境设置

### 本地运行命令
```bash
bundle install              # 安装依赖
bundle exec jekyll serve    # 启动开发服务器
bundle exec jekyll build    # 构建静态文件
```

### 调试技巧
- 使用 `--incremental` 参数加速构建
- 使用 `--host 0.0.0.0` 允许局域网访问
- 检查 `_site` 目录查看生成的文件

## 内容相关规则

### 技术文章写作要求
1. **标题明确**: 能准确概括文章内容
2. **结构清晰**: 使用二级、三级标题划分章节
3. **代码示例**: 必须包含完整可运行的代码
4. **实用性强**: 解决实际开发问题
5. **经验总结**: 包含踩坑经验和最佳实践

### Cocos Creator专业内容
- 性能优化技巧
- 平台适配经验
- 开发工具使用
- 项目架构设计
- 问题排查方法

## 部署相关

### GitHub Pages部署
- 确保 `baseurl` 配置正确
- 检查 `_config.yml` 中的 `url` 设置
- 验证所有链接的正确性

### 性能优化
- 图片压缩和WebP格式使用
- CSS和JS文件压缩
- 减少HTTP请求数量

## 维护指南

### 定期更新
- 每周至少发布一篇技术文章
- 及时更新项目信息和联系方式
- 保持依赖包的更新

### 内容质量
- 文章发布前仔细校对
- 确保代码示例正确可用
- 保持内容的时效性和准确性

### 用户体验
- 保持网站加载速度
- 确保移动端体验良好
- 及时回复读者反馈

## 注意事项
1. 修改 `_config.yml` 后需要重启Jekyll服务器
2. 文章文件名中的日期必须是有效格式
3. 确保所有外部链接的有效性
4. 定期备份重要内容和配置 